# первое уравнение m = 1, n = 2  Результат: -0.4142135623730951
# второе уравнение m = 1, n = 2  Результат: -0.4142135623730951

# первое уравнение m = 2, n = 5  Результат: -0.41092720756334733
# второе уравнение m = 2, n = 5  Результат: -0.41092720756334733

# первое уравнение m = 7, n = 3  Результат:  0.13052864335653047
# второе уравнение m = 7, n = 3  Результат:  0.1305286433565305

# первое уравнение m = 5, n = 6  Результат: -0.04268435305667767
# второе уравнение m = 5, n = 6  Результат: -0.042684353056677615

# первое уравнение m = 9, n = 2  Результат:  0.1761984930696561
# второе уравнение m = 9, n = 2  Результат:  0.1761984930696561





import sys  # Импортируем модуль sys, если потребуется для дальнейшей работы
from math import sqrt  # Импортируем функцию sqrt из модуля math для вычисления квадратного корня
         
def func1():
    print("Введите значения переменных m и n для первого уравнения.")
    while True:  # Цикл для повторного запроса ввода
        input_values = input("Введенные значения: ")
        if input_values.strip() == "":  # Проверка на пустую строку
            return None  # Возвращаем None для перехода ко второму уравнению
        
        try:
            # Преобразуем введенные значения в числа с плавающей запятой
            m, n = map(float, input_values.split())
            # Вычисляем числитель первого уравнения
            numerator = (m - 1) * sqrt(m) - (n - 1) * sqrt(n)
            # Вычисляем знаменатель первого уравнения
            denominator = sqrt(m**3 * n) + n * m + m**2 - m
            
            if denominator == 0:  # Проверка на деление на ноль
                print("Деление на ноль. Переход ко второму уравнению.")
                return None
            
            z1 = numerator / denominator  # Вычисляем результат
            return z1  # Возвращаем результат
        except ValueError:  # Обработка ошибок преобразования типов
            print("Некорректный ввод. Введите два числа.")

def func2():
    print("Введите значения переменных m и n для второго уравнения.")
    while True:  # Цикл для повторного запроса ввода
        input_values1 = input("Введенные значения: ")
        if input_values1.strip() == "":  # Проверка на пустую строку
            return None  # Возвращаем None для завершения программы
        
        try:
            # Преобразуем введенные значения в числа с плавающей запятой
            m, n = map(float, input_values1.split())
            # Вычисляем числитель второго уравнения
            numerator1 = sqrt(m) - sqrt(n)
            denominator1 = m  # Знаменатель второго уравнения
            
            if denominator1 == 0:  # Проверка на деление на ноль
                print("Деление на ноль. До свидания.")
                return None
            
            z2 = numerator1 / denominator1  # Вычисляем результат
            return z2  # Возвращаем результат  
        except ValueError:  # Обработка ошибок преобразования типов
            print("Некорректный ввод. Введите два числа.")

# Основной цикл программы
result = func1()  # Вызываем первую функцию и сохраняем результат
if result is not None:  # Проверяем, был ли получен результат
    print(f"Результат первого уравнения: {result}")

result1 = func2()  # Вызываем вторую функцию и сохраняем результат
if result1 is not None:  # Проверяем, был ли получен результат
    print(f"Результат второго уравнения: {result1}")
else:
    print("Завершение программы.")  # Сообщаем о завершении программы
